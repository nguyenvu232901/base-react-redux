# Multi-stage build for React app with minimal final image
# Build stage
FROM node:22-alpine3.20 AS build

# Install security updates
RUN apk update && apk upgrade && apk add --no-cache dumb-init

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production --no-audit --no-fund

# Copy source code
COPY --chown=nextjs:nodejs . .

# Switch to non-root user for build
USER nextjs

# Build the app for production
RUN npm run build

# Minimal production stage with Caddy (more secure than nginx)
FROM caddy:2.8-alpine

# Install security updates
RUN apk update && apk upgrade && \
    apk add --no-cache dumb-init && \
    rm -rf /var/cache/apk/* /tmp/* /var/tmp/*

# Create non-root user
RUN addgroup -g 1001 -S caddy-user && \
    adduser -S caddy-user -u 1001 -G caddy-user

# Copy built app from build stage
COPY --from=build --chown=caddy-user:caddy-user /app/build /usr/share/caddy

# Create Caddyfile for security
RUN echo ':80 {' > /etc/caddy/Caddyfile && \
    echo '  root * /usr/share/caddy' >> /etc/caddy/Caddyfile && \
    echo '  file_server' >> /etc/caddy/Caddyfile && \
    echo '  try_files {path} /index.html' >> /etc/caddy/Caddyfile && \
    echo '  header {' >> /etc/caddy/Caddyfile && \
    echo '    X-Frame-Options "SAMEORIGIN"' >> /etc/caddy/Caddyfile && \
    echo '    X-Content-Type-Options "nosniff"' >> /etc/caddy/Caddyfile && \
    echo '    X-XSS-Protection "1; mode=block"' >> /etc/caddy/Caddyfile && \
    echo '    Referrer-Policy "strict-origin-when-cross-origin"' >> /etc/caddy/Caddyfile && \
    echo '    Strict-Transport-Security "max-age=31536000; includeSubDomains"' >> /etc/caddy/Caddyfile && \
    echo '  }' >> /etc/caddy/Caddyfile && \
    echo '}' >> /etc/caddy/Caddyfile && \
    chown caddy-user:caddy-user /etc/caddy/Caddyfile

# Set proper permissions
RUN chown -R caddy-user:caddy-user /usr/share/caddy

# Switch to non-root user
USER caddy-user

# Expose port 80
EXPOSE 80

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Start Caddy
CMD ["caddy", "run", "--config", "/etc/caddy/Caddyfile"]
